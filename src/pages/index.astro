---
import Main from "@/layouts/Main.astro";
import Models from "@/components/models";
import Search from "@/components/search";
import "@/styles/main.css";
---

<Main title="Civitai Model Browser">
  <main>
    <h1>Civitai Model Browser</h1>
    <p>Displays Civitai info for your locally downloaded models</p>
    <p>Runs in your browser, no data is uploaded</p>

    <!-- @ts-ignore (webkitdirectory not exists) -->
    <input
      id="model-folder"
      type="file"
      webkitdirectory
      label="Choose model directory"
    />
    <button>Choose model folder</button>
    <Search client:visible />
    <Models client:visible />
  </main>
</Main>

<script>
  import {
    $models,
    $progress,
    $hashes,
    cacheHash,
    updateModel,
  } from "@/lib/store";
  import type { Model } from "@/lib/types";

  const button = document.querySelector("button");
  const input: HTMLElement | null = document.querySelector("#model-folder");
  const worker = new Worker(new URL("../lib/worker", import.meta.url), {
    type: "module",
  });

  button?.addEventListener("click", () => {
    $models.set({});
    $progress.set({ current: "", remaining: 0 });
    input!.click();
  });
  input?.addEventListener("change", (event) =>
    worker.postMessage({
      files: (event.target as HTMLInputElement).files,
      hashCache: $hashes.get(),
    })
  );
  worker.addEventListener("message", (event) => {
    const { data } = event || {};
    if (!data) return;
    switch (data.type) {
      case "models":
        data.models.forEach((m: Model) => {
          delete m.localFile;
          $models.setKey(m.id, m);
        });
        $progress.setKey("remaining", data.models.length);
        break;
      case "processing":
        $progress.setKey("current", data.model.id);
        break;
      case "updateModel":
        const { type, ...rest } = data;
        updateModel(rest);
        break;
      case "processed":
        $progress.setKey("remaining", $progress.get().remaining - 1);
        const $model = $models.get()[data.model.id];
        $model?.hash && cacheHash(data.model.localFile.name, $model.hash);
        break;
      default:
        console.error("Unknown message type", event.data.type);
    }
  });
</script>
